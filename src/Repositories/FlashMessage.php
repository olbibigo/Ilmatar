<?php
namespace Repositories;

use Ilmatar\JqGrid;
use Symfony\Component\Translation\Translator;
use Symfony\Component\Routing\Generator\UrlGenerator;
use Carbon\Carbon;

/**
 * FlashMessage
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FlashMessage extends JqGrid
{
    public function getJqGridColModels(Translator $translator, UrlGenerator $urlGenerator = null, array $options = [])
    {
        $columns = parent::getJqGridColModels($translator, $urlGenerator, $options);

        //Change target filter
        foreach ($columns as $idx => $column) {
            if ('target' == $column['name']) {
                $columns[$idx]['stype'] = "select";
                $columns[$idx]['searchoptions'] = array(
                    "sopt"  => array(self::JQGRID_OPERATOR_EQUAL),
                    "value" => self::buildSortValue(\Entities\FlashMessage::getAllTargets(), $translator)
                );
                $columns[$idx]['edittype']    = "select";
                $columns[$idx]['editoptions'] = array(
                    "value" => self::buildSortValue(\Entities\FlashMessage::getAllTargets(), $translator, false)
                );
                unset($columns[$idx]['align']);
                unset($columns[$idx]['formatter']);
            } elseif (in_array($column['name'], array('begin_at', 'end_at'), true)) {
                $columns[$idx]['editable'] = true;
            }
        }
        return $columns;
    }
    
    public function formatJqGridRow($entity, Translator $translator, array $options = [])
    {
        $columns = parent::formatJqGridRow($entity, $translator, $options);

        $columns['target'] = $translator->trans(\Entities\FlashMessage::getAllTargets()[$columns['target']]);
        
        return $columns;
    }
    
    public function getMessagesToDisplay(
        $target = \Entities\FlashMessage::TARGET_ONLY_USERS
    ) {
        return $this
            ->createQueryBuilder('f')
            ->where('f.is_active = 1')
            ->andWhere('f.target = :target')
            ->andWhere('f.begin_at <= :date')
            ->andWhere('f.end_at >= :date')
            ->setParameter('target', $target)
            ->setParameter('date', Carbon::now())
            ->getQuery()
            ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }
}
