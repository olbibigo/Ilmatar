<?php
namespace Repositories;

use Ilmatar\JqGrid;
use Carbon\Carbon;

/**
 * KpiValue
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KpiValue extends JqGrid
{
    //Warning : used by dashboard.js
    const PARAM_VIEW_NAME = 'view';

    public function getDataToDisplay($kpiCode, Array $parameters)
    {
        $view = isset($parameters[self::PARAM_VIEW_NAME]) ? $parameters[self::PARAM_VIEW_NAME] : \Entities\KpiValue::VIEW_DAY;

        switch ($view) {
            case \Entities\KpiValue::VIEW_DAY:
                return $this->getDailyData($kpiCode);
            case \Entities\KpiValue::VIEW_WEEK:
                return $this->getWeeklyData($kpiCode);
            case \Entities\KpiValue::VIEW_MONTH:
                return $this->getMonthlyData($kpiCode);
            default:
                return $this->getYearlyData($kpiCode);
        }
    }
    
    protected function getDailyData($kpiCode)
    {
        return array_map(
            function (\Entities\KpiValue $value) {
                return $value->getDataToDisplay();
            },
            $this->findByKpi(
                $this->getEntityManager()->getRepository('\\Entities\\Kpi')->findOneByCode($kpiCode),
                ['date' => 'ASC']
            )
        );
    }
    
    protected function getWeeklyData($kpiCode)
    {
        $smtp = $this
            ->getEntityManager()
            ->getConnection()
            ->prepare('SELECT k.date, WEEK(k.date, 1) AS week, YEAR(k.date) AS year, SUM(k.value) AS sum FROM kpi_value k WHERE k.kpi_id = :kpi_id GROUP BY YEAR(k.date), WEEK(k.date, 1)');
        $smtp->bindValue('kpi_id', $this->getEntityManager()->getRepository('\\Entities\\Kpi')->findOneByCode($kpiCode)->getId());
        $smtp->execute();

        return array_map(
            function ($value) {
                return [
                    //Get first day of the week
                    Carbon::now()->setISODate(intval($value['year']), intval($value['week']))->format('Y-m-d'),
                    floatval($value['sum'])
                ];
            },
            $smtp->fetchAll()
        );
    }
    
    protected function getMonthlyData($kpiCode)
    {
        $smtp = $this
            ->getEntityManager()
            ->getConnection()
            ->prepare('SELECT k.date, MONTH(k.date) AS month, YEAR(k.date) AS year, SUM(k.value) AS sum FROM kpi_value k WHERE k.kpi_id = :kpi_id GROUP BY YEAR(k.date), MONTH(k.date)');
        $smtp->bindValue('kpi_id', $this->getEntityManager()->getRepository('\\Entities\\Kpi')->findOneByCode($kpiCode)->getId());
        $smtp->execute();

        return array_map(
            function ($value) {
                return [
                    //Get first day of the month
                    Carbon::createFromFormat('Y-m-d', $value['date'])->firstOfMonth()->format('Y-m-d'),
                    floatval($value['sum'])
                ];
            },
            $smtp->fetchAll()
        );
    }
    
    protected function getYearlyData($kpiCode)
    {
        $smtp = $this
            ->getEntityManager()
            ->getConnection()
            ->prepare('SELECT k.date, YEAR(k.date) AS year, SUM(k.value) AS sum FROM kpi_value k WHERE k.kpi_id = :kpi_id GROUP BY YEAR(k.date)');
        $smtp->bindValue('kpi_id', $this->getEntityManager()->getRepository('\\Entities\\Kpi')->findOneByCode($kpiCode)->getId());
        $smtp->execute();

        return array_map(
            function ($value) {
                return [
                    //Get first day of the year
                    Carbon::createFromFormat('Y-m-d', $value['date'])->firstOfYear()->format('Y-m-d'),
                    floatval($value['sum'])
                ];
            },
            $smtp->fetchAll()
        );
    }
}
