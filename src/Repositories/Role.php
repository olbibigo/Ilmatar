<?php
namespace Repositories;

use Doctrine\ORM\QueryBuilder;
use Ilmatar\JqGrid;
use Symfony\Component\Translation\Translator;
use Symfony\Component\Routing\Generator\UrlGenerator;

/**
 * Role
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Role extends JqGrid
{
    protected $functionalities = null;
    protected $repoPermissions = null;

    public function getJqGridColNames(array $options = [])
    {
        $columns = parent::getJqGridColNames($options);
        array_splice($columns, 3, 0, 'Users');
        return $columns;
    }

    public function getJqGridColModels(Translator $translator, UrlGenerator $urlGenerator = null, array $options = [])
    {
        $columns = parent::getJqGridColModels($translator, $urlGenerator, $options);
        $descriptionModel = array(
            array(
                "name"       => 'users',
                "index"      => 'users',
                "search"     => false,
                "editable"   => false,
                "sortable"   => false
            )
        );
        array_splice($columns, 3, 0, $descriptionModel);
        return $columns;
    }

    public function formatJqGridRow($entity, Translator $translator, array $options = [])
    {
        $columns = parent::formatJqGridRow($entity, $translator, $options);
        $users   = $entity->getUsers();
        if (!$users->isEmpty()) {
            $columns['users'] = array_map(
                function (\Entities\User $user) use ($options, $translator) {
                    if (isset($options['has_user_access']) && $options['has_user_access']) {
                        return sprintf(
                            '<a title="%s" href="%s">%s</a>',
                            $translator->trans("Click to display this user"),
                            $options['url_generator']->generate('user-edit', array('userId' => $user->getId())),
                            $user->getFullname()
                        );
                    } else {
                        return $user->getFullname();
                    }
                },
                $users->toArray()
            );
            sort($columns['users'], SORT_STRING);
            
            $columns['users'] = implode('<br/>', $columns['users']);
        }
        return $columns;
    }

    public function processJqGridSpecialFields($entity, &$values, $oper, Translator $translator, array $options = [])
    {
        /*if ($entity->isAdmin()) {
            throw new \Exception('Administrator role cannot be edited.');
        }*/
        $functionalities = $this->getEntityManager()->getRepository('\\Entities\\Functionality')->findBy(array('is_editable' => true));

        $isAdmin = $entity->isAdmin();
        foreach ($functionalities as $functionality) {
            if (!$isAdmin) {//Admin permissions cannot be changed
                if ($oper != JqGrid::JQGRID_ACTION_DELETE) {
                    if ($values['role']['permissions'][$functionality->getCode()] != "") {
                        if (\Entities\Permission::ACCESS_READWRITE === intval($values['role']['permissions'][$functionality->getCode()])) {
                            $this->setPermission($entity, $functionality, \Entities\Permission::ACCESS_READWRITE);
                        } elseif (\Entities\Permission::ACCESS_READ === intval($values['role']['permissions'][$functionality->getCode()])) {
                            $this->setPermission($entity, $functionality, \Entities\Permission::ACCESS_READ);
                        }
                    } else {
                        $this->unsetPermission($entity, $functionality);
                    }
                } else {
                    $this->unsetPermission($entity, $functionality);
                }
            }
            unset($values['role']['permissions'][$functionality->getCode()]);
        }

        $kpis = $this->getEntityManager()->getRepository('\\Entities\\Kpi')->findBy(array('is_active' => true));

        foreach ($kpis as $kpi) {
            if ($oper != JqGrid::JQGRID_ACTION_DELETE) {
                if (intval($values['role']['kpis'][$kpi->getCode()]) == 1) {
                    $this->addKpi($entity, $kpi);
                } else {
                    $this->removeKpi($entity, $kpi);
                }
            } else {
                $this->removeKpi($entity, $kpi);
            }
            unset($values['role']['kpis'][$kpi->getCode()]);
        }
        return $values;
    }

    protected function setPermission($role, $functionality, $permissionMode)
    {
        $this->repoPermissions = is_null($this->repoPermissions)
            ? $this->getEntityManager()->getRepository('\\Entities\\Permission')
            : $this->repoPermissions;
        $permission = $this->repoPermissions->findOneBy(
            array(
               'role'          => $role,
               'functionality' => $functionality
            )
        );

        if (is_null($permission)) {
            $permission = new \Entities\Permission;
            $permission->setRole($role);
            $permission->setFunctionality($functionality);
        }
        $permission->setType($permissionMode);
        $this->getEntityManager()->persist($permission);
    }
    
    protected function unsetPermission($role, $functionality)
    {
        $this->repoPermissions = is_null($this->repoPermissions)
            ? $this->getEntityManager()->getRepository('\\Entities\\Permission')
            : $this->repoPermissions;
        $permission = $this->repoPermissions->findOneBy(
            array(
               'role'          => $role,
               'functionality' => $functionality
            )
        );
        if (!is_null($permission)) {
            $this->getEntityManager()->remove($permission);
        }
    }

    protected function addKpi($role, $kpi)
    {
        if (!$role->isKpi($kpi)) {
            $role->addKpi($kpi);
        }
    }

    protected function removeKpi($role, $kpi)
    {
        if ($role->isKpi($kpi)) {
            $role->removeKpi($kpi);
        }
    }
}
