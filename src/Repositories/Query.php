<?php
namespace Repositories;

use Symfony\Component\Translation\Translator;
use Ilmatar\JqGrid;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Routing\Generator\UrlGenerator;

/**
 * Query
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Query extends JqGrid
{
    protected $listExcludeForDisplay = ['deleted_at', 'deleted_by', 'is_visible'];
    
    public function getJqGridColNames(array $options = [])
    {
        $columns = parent::getJqGridColNames($options);
        //Appends creator
        $columns[] = 'Creator';

        return $columns;
    }
    public function getJqGridColModels(Translator $translator, UrlGenerator $urlGenerator = null, array $options = [])
    {
        $columns = parent::getJqGridColModels($translator, $urlGenerator, $options);

        //Appends creator
        $columns[] = array(
            "name"       => 'creator',
            "index"      => 'creator',
            "search"     => false,
            "editable"   => false,
            "sortable"   => false
        );
        
        //Change Visibility filter
        foreach ($columns as $idx => $column) {
            if ('visibility' == $column['name']) {
                $columns[$idx]['searchoptions'] = array(
                    "sopt"  => array(self::JQGRID_OPERATOR_EQUAL),
                    "value" => self::buildSortValue(\Entities\Query::getAllVisibilities(), $translator)
                );
                $columns[$idx]['stype'] = "select";
                unset($columns[$idx]['align']);
                unset($columns[$idx]['formatter']);
                continue;
            }
            if ('mail_repeats' == $column['name']) {
                $columns[$idx]['searchoptions'] = array(
                    "sopt"  => array(self::JQGRID_OPERATOR_EQUAL),
                    "value" => self::buildSortValue(\Entities\Query::getAllRepeats(), $translator)
                );
                $columns[$idx]['stype'] = "select";
                unset($columns[$idx]['align']);
                unset($columns[$idx]['formatter']);
                continue;
            }
            if ('export_format' == $column['name']) {
                $columns[$idx]['searchoptions'] = array(
                    "sopt"  => array(self::JQGRID_OPERATOR_EQUAL),
                    "value" => self::buildSortValue(\Entities\Query::getAllExportFormats(), $translator)
                );
                $columns[$idx]['stype'] = "select";
                unset($columns[$idx]['align']);
                unset($columns[$idx]['formatter']);
                continue;
            }
        }
        return $columns;
    }

    public function formatJqGridRow($entity, Translator $translator, array $options = [])
    {
        $columns = parent::formatJqGridRow($entity, $translator, $options);
        //Get creator
        $columns['creator']       = $entity->getCreator()->getFullname();
        $columns['visibility']    = $translator->trans(\Entities\Query::getAllVisibilities()[$columns['visibility']]);
        $columns['mail_repeats']  = $translator->trans(\Entities\Query::getAllRepeats()[$columns['mail_repeats']]);
        $columns['export_format'] = \Entities\Query::getAllExportFormats()[$columns['export_format']];
        return $columns;
    }

    protected function getQuerySelectClause(QueryBuilder $qb, $alias, array $options = [])
    {
        $qb = parent::getQuerySelectClause($qb, $alias);
        $qb->andWhere($qb->expr()->eq($alias . '.is_visible', true));
        //Displays all queries for ADMIN
        //Otherwise displays only those visible from all or created by current user
        if (isset($options['user']) && !$options['user']->isAdmin()) {
            $qb->andWhere(
                $qb->expr()->orx(
                    $qb->expr()->eq($alias . '.visibility', \Entities\Query::VISIBILITY_ALL),
                    $qb->expr()->eq($alias . '.creator', $options['user']->getId())
                )
            );
        }
        return $qb;
    }
    
    public function processJqGridSpecialFields($entity, &$values, $oper, Translator $translator, array $options = [])
    {
        $entity->setCreator($options['user']);
    }
}
