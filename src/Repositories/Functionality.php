<?php
namespace Repositories;

use Doctrine\ORM\QueryBuilder;
use Ilmatar\JqGrid;
use Symfony\Component\Translation\Translator;
use Symfony\Component\Routing\Generator\UrlGenerator;

/**
 * Functionality
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Functionality extends JqGrid
{
    protected $listExcludeForDisplay = array('is_editable');

    public function getJqGridColNames(array $options = [])
    {
        $columns = parent::getJqGridColNames($options);
        array_splice($columns, 3, 0, 'Permission to read');
        array_splice($columns, 4, 0, 'Permission to read/write');
        return $columns;
    }
    
    public function getJqGridColModels(Translator $translator, UrlGenerator $urlGenerator = null, array $options = [])
    {
        $columns = parent::getJqGridColModels($translator, $urlGenerator, $options);
        $readRoleModel = array(
            array(
                "name"       => 'read_roles',
                "index"      => 'read_roles',
                "search"     => false,
                "editable"   => false,
                "sortable"   => false
            )
        );
        array_splice($columns, 3, 0, $readRoleModel);

        $readWriteRoleModel = array(
            array(
                "name"       => 'read_write_roles',
                "index"      => 'read_write_roles',
                "search"     => false,
                "editable"   => false,
                "sortable"   => false
            )
        );
        array_splice($columns, 4, 0, $readWriteRoleModel);

        return $columns;
    }
    
    public function formatJqGridRow($entity, Translator $translator, array $options = [])
    {
        $columns = parent::formatJqGridRow($entity, $translator, $options);

        $columns['code'] = str_replace('FUNCTIONALITY_', '', $entity->getCode());

        $permissions = $entity->getPermissions();

        if (!$permissions->isEmpty()) {
            $columns['read_roles'] = array_map(
                function (\Entities\Permission $permission) use ($translator, $options) {
                    if ($permission->getType() == \Entities\Permission::ACCESS_READ) {
                        if (isset($options['has_role_access']) && $options['has_role_access']) {
                            return sprintf(
                                '<a title="%s" href="%s">%s</a>',
                                $translator->trans("Click to display this role"),
                                $options['url_generator']->generate('role-edit', array('roleId' => $permission->getRole()->getId())),
                                $permission->getRole()->getCode()
                            );
                        } else {
                            return $permission->getRole()->getCode();
                        }
                    }
                    return null;
                },
                $permissions->toArray()
            );
            $columns['read_roles'] = array_filter($columns['read_roles']);
            sort($columns['read_roles'], SORT_STRING);

            $columns['read_roles'] = implode('<br/>', $columns['read_roles']);
        } else {
            $columns['read_roles'] = "";
        }

        if (!$permissions->isEmpty()) {
            $columns['read_write_roles'] = array_map(
                function (\Entities\Permission $permission) use ($options, $translator) {
                    if ($permission->getType() == \Entities\Permission::ACCESS_READWRITE) {
                        if (isset($options['has_role_access']) && $options['has_role_access']) {
                            return sprintf(
                                '<a title="%s" href="%s">%s</a>',
                                $translator->trans("Click to display this role"),
                                $options['url_generator']->generate('role-edit', array('roleId' => $permission->getRole()->getId())),
                                $permission->getRole()->getCode()
                            );
                        } else {
                            return $permission->getRole()->getCode();
                        }
                    }
                    return null;
                },
                $permissions->toArray()
            );
            $columns['read_write_roles'] = array_filter($columns['read_write_roles']);
            sort($columns['read_write_roles'], SORT_STRING);
            
            $columns['read_write_roles'] = implode('<br/>', $columns['read_write_roles']);
        } else {
            $columns['read_write_roles'] = "";
        }
            
        return $columns;
    }
}
